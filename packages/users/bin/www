#!/usr/bin/env node
const app = require('../app');
const debug = require('debug')('crud-users:server');
const http = require('http');

const ERROR_CODES = {
    eacces: 'requires elevated privileges',
    eaddrinuse: 'is already in use'
};

/**
 * Get and store port in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Normalize a port.
 * @param {} val - Server port.
 * @return {port} - Safe port path (type:any) 
 */
function normalizePort(val) {
    var notANum = isNaN(val);
    // number port
    if (val && !notANum && val >= 0) return parseInt(val, 10);
    // pipe port
    else if (notANum) return val; 
    // invalid port
    return null;
}

/**
 * Listener function for HTTP server 'listening' event.
 */
const onListening = function () {
    var address = server.address();
    var bind = typeof address === 'string'
        ? 'pipe ' + address
        : ('port ' + address.port || 'unknown');
    debug('Listening on ' + bind);
};

/**
 * Event listener for HTTP server error.
 * @param {object} error - Server error.
 * @return Stops process and/or throws an error
 */
const onError = function (error) {
    if (typeof error !== 'object' || error.syscall !== 'listen') throw error;

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + JSON.stringify(port);

    if (!error.code || !ERROR_CODES[error.code]) throw error;
    console.error(`${bind} is already in use`);
    process.exit(1);
};

// Prepare server
var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);